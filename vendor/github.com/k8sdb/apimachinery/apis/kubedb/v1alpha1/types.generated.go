// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_resource "k8s.io/apimachinery/pkg/api/resource"
	pkg1_v1 "k8s.io/client-go/pkg/api/v1"
	"reflect"
	"runtime"
)

const (
	// ----- content types ----
	codecSelferC_UTF87599 = 1
	codecSelferC_RAW7599  = 0
	// ----- value types used ----
	codecSelferValueTypeArray7599 = 10
	codecSelferValueTypeMap7599   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey7599    = 2
	codecSelfer_containerMapValue7599  = 3
	codecSelfer_containerMapEnd7599    = 4
	codecSelfer_containerArrayElem7599 = 6
	codecSelfer_containerArrayEnd7599  = 7
)

var (
	codecSelferBitsize7599                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr7599 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer7599 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_resource.Quantity
		var v1 pkg1_v1.VolumeSource
		_, _ = v0, v1
	}
}

func (x *InitSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.ScriptSource != nil
			yyq2[1] = x.SnapshotSource != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					if x.ScriptSource == nil {
						r.EncodeNil()
					} else {
						x.ScriptSource.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("scriptSource"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.ScriptSource == nil {
						r.EncodeNil()
					} else {
						x.ScriptSource.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					if x.SnapshotSource == nil {
						r.EncodeNil()
					} else {
						x.SnapshotSource.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("snapshotSource"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.SnapshotSource == nil {
						r.EncodeNil()
					} else {
						x.SnapshotSource.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *InitSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *InitSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "scriptSource":
			if r.TryDecodeAsNil() {
				if x.ScriptSource != nil {
					x.ScriptSource = nil
				}
			} else {
				if x.ScriptSource == nil {
					x.ScriptSource = new(ScriptSourceSpec)
				}
				x.ScriptSource.CodecDecodeSelf(d)
			}
		case "snapshotSource":
			if r.TryDecodeAsNil() {
				if x.SnapshotSource != nil {
					x.SnapshotSource = nil
				}
			} else {
				if x.SnapshotSource == nil {
					x.SnapshotSource = new(SnapshotSourceSpec)
				}
				x.SnapshotSource.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *InitSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.ScriptSource != nil {
			x.ScriptSource = nil
		}
	} else {
		if x.ScriptSource == nil {
			x.ScriptSource = new(ScriptSourceSpec)
		}
		x.ScriptSource.CodecDecodeSelf(d)
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.SnapshotSource != nil {
			x.SnapshotSource = nil
		}
	} else {
		if x.SnapshotSource == nil {
			x.SnapshotSource = new(SnapshotSourceSpec)
		}
		x.SnapshotSource.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *ScriptSourceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [28]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.ScriptPath != ""
			yyq2[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq2[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq2[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq2[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq2[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq2[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq2[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq2[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq2[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq2[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq2[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq2[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq2[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq2[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq2[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq2[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq2[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq2[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq2[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq2[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq2[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq2[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq2[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq2[24] = x.VolumeSource.Projected != nil && x.Projected != nil
			yyq2[25] = x.VolumeSource.PortworxVolume != nil && x.PortworxVolume != nil
			yyq2[26] = x.VolumeSource.ScaleIO != nil && x.ScaleIO != nil
			yyq2[27] = x.VolumeSource.StorageOS != nil && x.StorageOS != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(28)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.ScriptPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("scriptPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.ScriptPath))
					}
				}
			}
			var yyn6 bool
			if x.VolumeSource.HostPath == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn9 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn12 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn12 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn15 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn15 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn18 bool
			if x.VolumeSource.GitRepo == nil {
				yyn18 = true
				goto LABEL18
			}
		LABEL18:
			if yyr2 || yy2arr2 {
				if yyn18 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn18 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn21 bool
			if x.VolumeSource.Secret == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn24 bool
			if x.VolumeSource.NFS == nil {
				yyn24 = true
				goto LABEL24
			}
		LABEL24:
			if yyr2 || yy2arr2 {
				if yyn24 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn24 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn27 bool
			if x.VolumeSource.ISCSI == nil {
				yyn27 = true
				goto LABEL27
			}
		LABEL27:
			if yyr2 || yy2arr2 {
				if yyn27 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn27 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn30 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn30 = true
				goto LABEL30
			}
		LABEL30:
			if yyr2 || yy2arr2 {
				if yyn30 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn30 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn33 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn33 = true
				goto LABEL33
			}
		LABEL33:
			if yyr2 || yy2arr2 {
				if yyn33 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn33 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn36 bool
			if x.VolumeSource.RBD == nil {
				yyn36 = true
				goto LABEL36
			}
		LABEL36:
			if yyr2 || yy2arr2 {
				if yyn36 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn36 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn39 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn39 = true
				goto LABEL39
			}
		LABEL39:
			if yyr2 || yy2arr2 {
				if yyn39 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn39 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn42 bool
			if x.VolumeSource.Cinder == nil {
				yyn42 = true
				goto LABEL42
			}
		LABEL42:
			if yyr2 || yy2arr2 {
				if yyn42 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn42 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn45 bool
			if x.VolumeSource.CephFS == nil {
				yyn45 = true
				goto LABEL45
			}
		LABEL45:
			if yyr2 || yy2arr2 {
				if yyn45 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn45 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn48 bool
			if x.VolumeSource.Flocker == nil {
				yyn48 = true
				goto LABEL48
			}
		LABEL48:
			if yyr2 || yy2arr2 {
				if yyn48 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn48 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn51 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn51 = true
				goto LABEL51
			}
		LABEL51:
			if yyr2 || yy2arr2 {
				if yyn51 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn51 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn54 bool
			if x.VolumeSource.FC == nil {
				yyn54 = true
				goto LABEL54
			}
		LABEL54:
			if yyr2 || yy2arr2 {
				if yyn54 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn54 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn57 bool
			if x.VolumeSource.AzureFile == nil {
				yyn57 = true
				goto LABEL57
			}
		LABEL57:
			if yyr2 || yy2arr2 {
				if yyn57 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn57 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn60 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn60 = true
				goto LABEL60
			}
		LABEL60:
			if yyr2 || yy2arr2 {
				if yyn60 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn60 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn63 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn63 = true
				goto LABEL63
			}
		LABEL63:
			if yyr2 || yy2arr2 {
				if yyn63 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn63 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn66 bool
			if x.VolumeSource.Quobyte == nil {
				yyn66 = true
				goto LABEL66
			}
		LABEL66:
			if yyr2 || yy2arr2 {
				if yyn66 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn66 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn69 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn69 = true
				goto LABEL69
			}
		LABEL69:
			if yyr2 || yy2arr2 {
				if yyn69 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn69 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn72 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn72 = true
				goto LABEL72
			}
		LABEL72:
			if yyr2 || yy2arr2 {
				if yyn72 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn72 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn75 bool
			if x.VolumeSource.Projected == nil {
				yyn75 = true
				goto LABEL75
			}
		LABEL75:
			if yyr2 || yy2arr2 {
				if yyn75 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[24] {
						if x.Projected == nil {
							r.EncodeNil()
						} else {
							x.Projected.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("projected"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn75 {
						r.EncodeNil()
					} else {
						if x.Projected == nil {
							r.EncodeNil()
						} else {
							x.Projected.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn78 bool
			if x.VolumeSource.PortworxVolume == nil {
				yyn78 = true
				goto LABEL78
			}
		LABEL78:
			if yyr2 || yy2arr2 {
				if yyn78 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[25] {
						if x.PortworxVolume == nil {
							r.EncodeNil()
						} else {
							x.PortworxVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[25] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("portworxVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn78 {
						r.EncodeNil()
					} else {
						if x.PortworxVolume == nil {
							r.EncodeNil()
						} else {
							x.PortworxVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn81 bool
			if x.VolumeSource.ScaleIO == nil {
				yyn81 = true
				goto LABEL81
			}
		LABEL81:
			if yyr2 || yy2arr2 {
				if yyn81 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[26] {
						if x.ScaleIO == nil {
							r.EncodeNil()
						} else {
							x.ScaleIO.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[26] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("scaleIO"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn81 {
						r.EncodeNil()
					} else {
						if x.ScaleIO == nil {
							r.EncodeNil()
						} else {
							x.ScaleIO.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn84 bool
			if x.VolumeSource.StorageOS == nil {
				yyn84 = true
				goto LABEL84
			}
		LABEL84:
			if yyr2 || yy2arr2 {
				if yyn84 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[27] {
						if x.StorageOS == nil {
							r.EncodeNil()
						} else {
							x.StorageOS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[27] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("storageos"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn84 {
						r.EncodeNil()
					} else {
						if x.StorageOS == nil {
							r.EncodeNil()
						} else {
							x.StorageOS.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *ScriptSourceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *ScriptSourceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "scriptPath":
			if r.TryDecodeAsNil() {
				x.ScriptPath = ""
			} else {
				yyv4 := &x.ScriptPath
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(pkg1_v1.HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(pkg1_v1.HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(pkg1_v1.EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(pkg1_v1.EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(pkg1_v1.GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(pkg1_v1.GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(pkg1_v1.AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(pkg1_v1.AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(pkg1_v1.GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(pkg1_v1.GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(pkg1_v1.SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(pkg1_v1.SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(pkg1_v1.NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(pkg1_v1.NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(pkg1_v1.ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(pkg1_v1.ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(pkg1_v1.GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(pkg1_v1.GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(pkg1_v1.PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(pkg1_v1.PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(pkg1_v1.RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(pkg1_v1.RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(pkg1_v1.FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(pkg1_v1.FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(pkg1_v1.CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(pkg1_v1.CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(pkg1_v1.CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(pkg1_v1.CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(pkg1_v1.FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(pkg1_v1.FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(pkg1_v1.DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(pkg1_v1.DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(pkg1_v1.FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(pkg1_v1.FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(pkg1_v1.AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(pkg1_v1.AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(pkg1_v1.ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(pkg1_v1.ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(pkg1_v1.VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(pkg1_v1.VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(pkg1_v1.QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(pkg1_v1.QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(pkg1_v1.AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(pkg1_v1.AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(pkg1_v1.PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(pkg1_v1.PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "projected":
			if x.VolumeSource.Projected == nil {
				x.VolumeSource.Projected = new(pkg1_v1.ProjectedVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Projected != nil {
					x.Projected = nil
				}
			} else {
				if x.Projected == nil {
					x.Projected = new(pkg1_v1.ProjectedVolumeSource)
				}
				x.Projected.CodecDecodeSelf(d)
			}
		case "portworxVolume":
			if x.VolumeSource.PortworxVolume == nil {
				x.VolumeSource.PortworxVolume = new(pkg1_v1.PortworxVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PortworxVolume != nil {
					x.PortworxVolume = nil
				}
			} else {
				if x.PortworxVolume == nil {
					x.PortworxVolume = new(pkg1_v1.PortworxVolumeSource)
				}
				x.PortworxVolume.CodecDecodeSelf(d)
			}
		case "scaleIO":
			if x.VolumeSource.ScaleIO == nil {
				x.VolumeSource.ScaleIO = new(pkg1_v1.ScaleIOVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ScaleIO != nil {
					x.ScaleIO = nil
				}
			} else {
				if x.ScaleIO == nil {
					x.ScaleIO = new(pkg1_v1.ScaleIOVolumeSource)
				}
				x.ScaleIO.CodecDecodeSelf(d)
			}
		case "storageos":
			if x.VolumeSource.StorageOS == nil {
				x.VolumeSource.StorageOS = new(pkg1_v1.StorageOSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.StorageOS != nil {
					x.StorageOS = nil
				}
			} else {
				if x.StorageOS == nil {
					x.StorageOS = new(pkg1_v1.StorageOSVolumeSource)
				}
				x.StorageOS.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *ScriptSourceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj33 int
	var yyb33 bool
	var yyhl33 bool = l >= 0
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.ScriptPath = ""
	} else {
		yyv34 := &x.ScriptPath
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else {
			*((*string)(yyv34)) = r.DecodeString()
		}
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(pkg1_v1.HostPathVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(pkg1_v1.HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(pkg1_v1.EmptyDirVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(pkg1_v1.EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(pkg1_v1.GCEPersistentDiskVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(pkg1_v1.GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(pkg1_v1.AWSElasticBlockStoreVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(pkg1_v1.AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(pkg1_v1.GitRepoVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(pkg1_v1.GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(pkg1_v1.SecretVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(pkg1_v1.SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(pkg1_v1.NFSVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(pkg1_v1.NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(pkg1_v1.ISCSIVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(pkg1_v1.ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(pkg1_v1.GlusterfsVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(pkg1_v1.GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(pkg1_v1.PersistentVolumeClaimVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(pkg1_v1.PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(pkg1_v1.RBDVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(pkg1_v1.RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(pkg1_v1.FlexVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(pkg1_v1.FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(pkg1_v1.CinderVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(pkg1_v1.CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(pkg1_v1.CephFSVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(pkg1_v1.CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(pkg1_v1.FlockerVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(pkg1_v1.FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(pkg1_v1.DownwardAPIVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(pkg1_v1.DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(pkg1_v1.FCVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(pkg1_v1.FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(pkg1_v1.AzureFileVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(pkg1_v1.AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(pkg1_v1.ConfigMapVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(pkg1_v1.ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(pkg1_v1.VsphereVirtualDiskVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(pkg1_v1.VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(pkg1_v1.QuobyteVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(pkg1_v1.QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(pkg1_v1.AzureDiskVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(pkg1_v1.AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(pkg1_v1.PhotonPersistentDiskVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(pkg1_v1.PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Projected == nil {
		x.VolumeSource.Projected = new(pkg1_v1.ProjectedVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Projected != nil {
			x.Projected = nil
		}
	} else {
		if x.Projected == nil {
			x.Projected = new(pkg1_v1.ProjectedVolumeSource)
		}
		x.Projected.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PortworxVolume == nil {
		x.VolumeSource.PortworxVolume = new(pkg1_v1.PortworxVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.PortworxVolume != nil {
			x.PortworxVolume = nil
		}
	} else {
		if x.PortworxVolume == nil {
			x.PortworxVolume = new(pkg1_v1.PortworxVolumeSource)
		}
		x.PortworxVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ScaleIO == nil {
		x.VolumeSource.ScaleIO = new(pkg1_v1.ScaleIOVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.ScaleIO != nil {
			x.ScaleIO = nil
		}
	} else {
		if x.ScaleIO == nil {
			x.ScaleIO = new(pkg1_v1.ScaleIOVolumeSource)
		}
		x.ScaleIO.CodecDecodeSelf(d)
	}
	if x.VolumeSource.StorageOS == nil {
		x.VolumeSource.StorageOS = new(pkg1_v1.StorageOSVolumeSource)
	}
	yyj33++
	if yyhl33 {
		yyb33 = yyj33 > l
	} else {
		yyb33 = r.CheckBreak()
	}
	if yyb33 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.StorageOS != nil {
			x.StorageOS = nil
		}
	} else {
		if x.StorageOS == nil {
			x.StorageOS = new(pkg1_v1.StorageOSVolumeSource)
		}
		x.StorageOS.CodecDecodeSelf(d)
	}
	for {
		yyj33++
		if yyhl33 {
			yyb33 = yyj33 > l
		} else {
			yyb33 = r.CheckBreak()
		}
		if yyb33 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj33-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *SnapshotSourceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Namespace != ""
			yyq2[1] = x.Name != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *SnapshotSourceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *SnapshotSourceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv4 := &x.Namespace
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv6 := &x.Name
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *SnapshotSourceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv9 := &x.Namespace
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv11 := &x.Name
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *BackupScheduleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.CronExpression != ""
			yyq2[1] = x.StorageSecretName != ""
			yyq2[2] = x.SnapshotStorageSpec.Local != nil && x.Local != nil
			yyq2[3] = x.SnapshotStorageSpec.S3 != nil && x.S3 != nil
			yyq2[4] = x.SnapshotStorageSpec.GCS != nil && x.GCS != nil
			yyq2[5] = x.SnapshotStorageSpec.Azure != nil && x.Azure != nil
			yyq2[6] = x.SnapshotStorageSpec.Swift != nil && x.Swift != nil
			yyq2[7] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.CronExpression))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("cronExpression"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.CronExpression))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.StorageSecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("storageSecretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.StorageSecretName))
					}
				}
			}
			var yyn9 bool
			if x.SnapshotStorageSpec.Local == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[2] {
						if x.Local == nil {
							r.EncodeNil()
						} else {
							x.Local.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("local"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn9 {
						r.EncodeNil()
					} else {
						if x.Local == nil {
							r.EncodeNil()
						} else {
							x.Local.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn12 bool
			if x.SnapshotStorageSpec.S3 == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[3] {
						if x.S3 == nil {
							r.EncodeNil()
						} else {
							x.S3.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("s3"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn12 {
						r.EncodeNil()
					} else {
						if x.S3 == nil {
							r.EncodeNil()
						} else {
							x.S3.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn15 bool
			if x.SnapshotStorageSpec.GCS == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[4] {
						if x.GCS == nil {
							r.EncodeNil()
						} else {
							x.GCS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("gcs"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn15 {
						r.EncodeNil()
					} else {
						if x.GCS == nil {
							r.EncodeNil()
						} else {
							x.GCS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn18 bool
			if x.SnapshotStorageSpec.Azure == nil {
				yyn18 = true
				goto LABEL18
			}
		LABEL18:
			if yyr2 || yy2arr2 {
				if yyn18 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[5] {
						if x.Azure == nil {
							r.EncodeNil()
						} else {
							x.Azure.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("azure"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn18 {
						r.EncodeNil()
					} else {
						if x.Azure == nil {
							r.EncodeNil()
						} else {
							x.Azure.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn21 bool
			if x.SnapshotStorageSpec.Swift == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem7599)
					if yyq2[6] {
						if x.Swift == nil {
							r.EncodeNil()
						} else {
							x.Swift.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("swift"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Swift == nil {
							r.EncodeNil()
						} else {
							x.Swift.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[7] {
					yy25 := &x.Resources
					yy25.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yy27 := &x.Resources
					yy27.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *BackupScheduleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *BackupScheduleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "cronExpression":
			if r.TryDecodeAsNil() {
				x.CronExpression = ""
			} else {
				yyv4 := &x.CronExpression
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "storageSecretName":
			if r.TryDecodeAsNil() {
				x.StorageSecretName = ""
			} else {
				yyv6 := &x.StorageSecretName
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "local":
			if x.SnapshotStorageSpec.Local == nil {
				x.SnapshotStorageSpec.Local = new(LocalSpec)
			}
			if r.TryDecodeAsNil() {
				if x.Local != nil {
					x.Local = nil
				}
			} else {
				if x.Local == nil {
					x.Local = new(LocalSpec)
				}
				x.Local.CodecDecodeSelf(d)
			}
		case "s3":
			if x.SnapshotStorageSpec.S3 == nil {
				x.SnapshotStorageSpec.S3 = new(S3Spec)
			}
			if r.TryDecodeAsNil() {
				if x.S3 != nil {
					x.S3 = nil
				}
			} else {
				if x.S3 == nil {
					x.S3 = new(S3Spec)
				}
				x.S3.CodecDecodeSelf(d)
			}
		case "gcs":
			if x.SnapshotStorageSpec.GCS == nil {
				x.SnapshotStorageSpec.GCS = new(GCSSpec)
			}
			if r.TryDecodeAsNil() {
				if x.GCS != nil {
					x.GCS = nil
				}
			} else {
				if x.GCS == nil {
					x.GCS = new(GCSSpec)
				}
				x.GCS.CodecDecodeSelf(d)
			}
		case "azure":
			if x.SnapshotStorageSpec.Azure == nil {
				x.SnapshotStorageSpec.Azure = new(AzureSpec)
			}
			if r.TryDecodeAsNil() {
				if x.Azure != nil {
					x.Azure = nil
				}
			} else {
				if x.Azure == nil {
					x.Azure = new(AzureSpec)
				}
				x.Azure.CodecDecodeSelf(d)
			}
		case "swift":
			if x.SnapshotStorageSpec.Swift == nil {
				x.SnapshotStorageSpec.Swift = new(SwiftSpec)
			}
			if r.TryDecodeAsNil() {
				if x.Swift != nil {
					x.Swift = nil
				}
			} else {
				if x.Swift == nil {
					x.Swift = new(SwiftSpec)
				}
				x.Swift.CodecDecodeSelf(d)
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = pkg1_v1.ResourceRequirements{}
			} else {
				yyv13 := &x.Resources
				yyv13.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *BackupScheduleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.CronExpression = ""
	} else {
		yyv15 := &x.CronExpression
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.StorageSecretName = ""
	} else {
		yyv17 := &x.StorageSecretName
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	if x.SnapshotStorageSpec.Local == nil {
		x.SnapshotStorageSpec.Local = new(LocalSpec)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Local != nil {
			x.Local = nil
		}
	} else {
		if x.Local == nil {
			x.Local = new(LocalSpec)
		}
		x.Local.CodecDecodeSelf(d)
	}
	if x.SnapshotStorageSpec.S3 == nil {
		x.SnapshotStorageSpec.S3 = new(S3Spec)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.S3 != nil {
			x.S3 = nil
		}
	} else {
		if x.S3 == nil {
			x.S3 = new(S3Spec)
		}
		x.S3.CodecDecodeSelf(d)
	}
	if x.SnapshotStorageSpec.GCS == nil {
		x.SnapshotStorageSpec.GCS = new(GCSSpec)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.GCS != nil {
			x.GCS = nil
		}
	} else {
		if x.GCS == nil {
			x.GCS = new(GCSSpec)
		}
		x.GCS.CodecDecodeSelf(d)
	}
	if x.SnapshotStorageSpec.Azure == nil {
		x.SnapshotStorageSpec.Azure = new(AzureSpec)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Azure != nil {
			x.Azure = nil
		}
	} else {
		if x.Azure == nil {
			x.Azure = new(AzureSpec)
		}
		x.Azure.CodecDecodeSelf(d)
	}
	if x.SnapshotStorageSpec.Swift == nil {
		x.SnapshotStorageSpec.Swift = new(SwiftSpec)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Swift != nil {
			x.Swift = nil
		}
	} else {
		if x.Swift == nil {
			x.Swift = new(SwiftSpec)
		}
		x.Swift.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Resources = pkg1_v1.ResourceRequirements{}
	} else {
		yyv24 := &x.Resources
		yyv24.CodecDecodeSelf(d)
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *SnapshotStorageSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.StorageSecretName != ""
			yyq2[1] = x.Local != nil
			yyq2[2] = x.S3 != nil
			yyq2[3] = x.GCS != nil
			yyq2[4] = x.Azure != nil
			yyq2[5] = x.Swift != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.StorageSecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("storageSecretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.StorageSecretName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					if x.Local == nil {
						r.EncodeNil()
					} else {
						x.Local.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("local"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.Local == nil {
						r.EncodeNil()
					} else {
						x.Local.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[2] {
					if x.S3 == nil {
						r.EncodeNil()
					} else {
						x.S3.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("s3"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.S3 == nil {
						r.EncodeNil()
					} else {
						x.S3.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[3] {
					if x.GCS == nil {
						r.EncodeNil()
					} else {
						x.GCS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("gcs"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.GCS == nil {
						r.EncodeNil()
					} else {
						x.GCS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[4] {
					if x.Azure == nil {
						r.EncodeNil()
					} else {
						x.Azure.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("azure"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.Azure == nil {
						r.EncodeNil()
					} else {
						x.Azure.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[5] {
					if x.Swift == nil {
						r.EncodeNil()
					} else {
						x.Swift.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("swift"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.Swift == nil {
						r.EncodeNil()
					} else {
						x.Swift.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *SnapshotStorageSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *SnapshotStorageSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "storageSecretName":
			if r.TryDecodeAsNil() {
				x.StorageSecretName = ""
			} else {
				yyv4 := &x.StorageSecretName
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "local":
			if r.TryDecodeAsNil() {
				if x.Local != nil {
					x.Local = nil
				}
			} else {
				if x.Local == nil {
					x.Local = new(LocalSpec)
				}
				x.Local.CodecDecodeSelf(d)
			}
		case "s3":
			if r.TryDecodeAsNil() {
				if x.S3 != nil {
					x.S3 = nil
				}
			} else {
				if x.S3 == nil {
					x.S3 = new(S3Spec)
				}
				x.S3.CodecDecodeSelf(d)
			}
		case "gcs":
			if r.TryDecodeAsNil() {
				if x.GCS != nil {
					x.GCS = nil
				}
			} else {
				if x.GCS == nil {
					x.GCS = new(GCSSpec)
				}
				x.GCS.CodecDecodeSelf(d)
			}
		case "azure":
			if r.TryDecodeAsNil() {
				if x.Azure != nil {
					x.Azure = nil
				}
			} else {
				if x.Azure == nil {
					x.Azure = new(AzureSpec)
				}
				x.Azure.CodecDecodeSelf(d)
			}
		case "swift":
			if r.TryDecodeAsNil() {
				if x.Swift != nil {
					x.Swift = nil
				}
			} else {
				if x.Swift == nil {
					x.Swift = new(SwiftSpec)
				}
				x.Swift.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *SnapshotStorageSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.StorageSecretName = ""
	} else {
		yyv12 := &x.StorageSecretName
		yym13 := z.DecBinary()
		_ = yym13
		if false {
		} else {
			*((*string)(yyv12)) = r.DecodeString()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Local != nil {
			x.Local = nil
		}
	} else {
		if x.Local == nil {
			x.Local = new(LocalSpec)
		}
		x.Local.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.S3 != nil {
			x.S3 = nil
		}
	} else {
		if x.S3 == nil {
			x.S3 = new(S3Spec)
		}
		x.S3.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.GCS != nil {
			x.GCS = nil
		}
	} else {
		if x.GCS == nil {
			x.GCS = new(GCSSpec)
		}
		x.GCS.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Azure != nil {
			x.Azure = nil
		}
	} else {
		if x.Azure == nil {
			x.Azure = new(AzureSpec)
		}
		x.Azure.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Swift != nil {
			x.Swift = nil
		}
	} else {
		if x.Swift == nil {
			x.Swift = new(SwiftSpec)
		}
		x.Swift.CodecDecodeSelf(d)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *LocalSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = true
			yyq2[1] = x.Path != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yy4 := &x.VolumeSource
					yy4.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("volumeSource"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yy6 := &x.VolumeSource
					yy6.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					yym9 := z.EncBinary()
					_ = yym9
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Path))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *LocalSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *LocalSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "volumeSource":
			if r.TryDecodeAsNil() {
				x.VolumeSource = pkg1_v1.VolumeSource{}
			} else {
				yyv4 := &x.VolumeSource
				yyv4.CodecDecodeSelf(d)
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv5 := &x.Path
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *LocalSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.VolumeSource = pkg1_v1.VolumeSource{}
	} else {
		yyv8 := &x.VolumeSource
		yyv8.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv9 := &x.Path
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *S3Spec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Endpoint != ""
			yyq2[2] = x.Prefix != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Endpoint))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("endpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Endpoint))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF87599, string(x.Bucket))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7599)
				r.EncodeString(codecSelferC_UTF87599, string("bucket"))
				z.EncSendContainerState(codecSelfer_containerMapValue7599)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF87599, string(x.Bucket))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("prefix"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *S3Spec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *S3Spec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "endpoint":
			if r.TryDecodeAsNil() {
				x.Endpoint = ""
			} else {
				yyv4 := &x.Endpoint
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "bucket":
			if r.TryDecodeAsNil() {
				x.Bucket = ""
			} else {
				yyv6 := &x.Bucket
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv8 := &x.Prefix
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *S3Spec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Endpoint = ""
	} else {
		yyv11 := &x.Endpoint
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Bucket = ""
	} else {
		yyv13 := &x.Bucket
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv15 := &x.Prefix
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *GCSSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[1] = x.Prefix != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF87599, string(x.Bucket))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7599)
				r.EncodeString(codecSelferC_UTF87599, string("bucket"))
				z.EncSendContainerState(codecSelfer_containerMapValue7599)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF87599, string(x.Bucket))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("prefix"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *GCSSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *GCSSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "bucket":
			if r.TryDecodeAsNil() {
				x.Bucket = ""
			} else {
				yyv4 := &x.Bucket
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv6 := &x.Prefix
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *GCSSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Bucket = ""
	} else {
		yyv9 := &x.Bucket
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv11 := &x.Prefix
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *AzureSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Container != ""
			yyq2[1] = x.Prefix != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Container))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("prefix"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *AzureSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *AzureSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				yyv4 := &x.Container
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv6 := &x.Prefix
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *AzureSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		yyv9 := &x.Container
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv11 := &x.Prefix
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *SwiftSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Container != ""
			yyq2[1] = x.Prefix != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Container))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("prefix"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Prefix))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *SwiftSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *SwiftSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				yyv4 := &x.Container
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv6 := &x.Prefix
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *SwiftSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		yyv9 := &x.Container
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv11 := &x.Prefix
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *MonitorSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Agent != ""
			yyq2[1] = x.Prometheus != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Agent))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("agent"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Agent))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					if x.Prometheus == nil {
						r.EncodeNil()
					} else {
						x.Prometheus.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("prometheus"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.Prometheus == nil {
						r.EncodeNil()
					} else {
						x.Prometheus.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *MonitorSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *MonitorSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "agent":
			if r.TryDecodeAsNil() {
				x.Agent = ""
			} else {
				yyv4 := &x.Agent
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "prometheus":
			if r.TryDecodeAsNil() {
				if x.Prometheus != nil {
					x.Prometheus = nil
				}
			} else {
				if x.Prometheus == nil {
					x.Prometheus = new(PrometheusSpec)
				}
				x.Prometheus.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *MonitorSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Agent = ""
	} else {
		yyv8 := &x.Agent
		yym9 := z.DecBinary()
		_ = yym9
		if false {
		} else {
			*((*string)(yyv8)) = r.DecodeString()
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		if x.Prometheus != nil {
			x.Prometheus = nil
		}
	} else {
		if x.Prometheus == nil {
			x.Prometheus = new(PrometheusSpec)
		}
		x.Prometheus.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x *PrometheusSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Namespace != ""
			yyq2[1] = len(x.Labels) != 0
			yyq2[2] = x.Interval != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[1] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym7 := z.EncBinary()
						_ = yym7
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym8 := z.EncBinary()
						_ = yym8
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7599)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Interval))
					}
				} else {
					r.EncodeString(codecSelferC_UTF87599, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey7599)
					r.EncodeString(codecSelferC_UTF87599, string("interval"))
					z.EncSendContainerState(codecSelfer_containerMapValue7599)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF87599, string(x.Interval))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7599)
			}
		}
	}
}

func (x *PrometheusSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7599 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7599)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7599 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7599)
		}
	}
}

func (x *PrometheusSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7599)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7599)
		switch yys3 {
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv4 := &x.Namespace
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv6 := &x.Labels
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringStringX(yyv6, false, d)
				}
			}
		case "interval":
			if r.TryDecodeAsNil() {
				x.Interval = ""
			} else {
				yyv8 := &x.Interval
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7599)
}

func (x *PrometheusSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv11 := &x.Namespace
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv13 := &x.Labels
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringStringX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7599)
	if r.TryDecodeAsNil() {
		x.Interval = ""
	} else {
		yyv15 := &x.Interval
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7599)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7599)
}

func (x DatabasePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF87599, string(x))
	}
}

func (x *DatabasePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7599
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}
